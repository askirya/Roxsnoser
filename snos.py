import logging
import asyncio
import smtplib
import ssl
import re
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
from aiogram.client.default import DefaultBotProperties

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

RECEIVERS = [
    'sms@telegram.org', 'dmca@telegram.org', 'abuse@telegram.org',
    'sticker@telegram.org', 'support@telegram.org'
]
user_email_dumps = {}  # {user_id: {email: password}}

class ReportStates(StatesGroup):
    selecting_category = State()
    entering_data = State()
    collecting_emails = State()

categories = {
    "1": "–°–ü–ê–ú / –†–ï–ö–õ–ê–ú–ê",
    "2": "–î–û–ö–°–ò–ù–ì / –°–õ–ò–í –î–ê–ù–ù–´–•",
    "3": "–û–°–ö–û–†–ë–õ–ï–ù–ò–Ø / –¢–†–û–õ–õ–ò–ù–ì",
    "4": "–ù–ê–†–ö–û–¢–ò–ö–ò",
    "5": "–ö–£–†–ê–¢–û–†–°–¢–í–û",
    "6": "–î–ï–¢–°–ö–û–ï –ü–û–†–ù–û",
    "7": "–í–´–ú–û–ì–ê–ù–ò–ï –ò–ù–¢–ò–ú–ê",
    "8": "–£–ì–ù–ï–¢–ï–ù–ò–ï –ù–ê–¶–ò–ò",
    "9": "–£–ì–ù–ï–¢–ï–ù–ò–ï –†–ï–õ–ò–ì–ò–ò",
    "10": "–†–ê–°–ß–õ–ï–ù–ï–ù–ö–ê",
    "11": "–ñ–ò–í–û–î–ï–†–°–¢–í–û",
    "12": "–ü–û–†–ù–û–ì–†–ê–§–ò–Ø",
    "13": "–ü–†–û–°–¢–ò–¢–£–¶–ò–Ø",
    "14": "–ü–†–ò–ó–´–í –ö –°–£–ò–¶–ò–î–£",
    "15": "–¢–ï–†–†–û–†–ò–ó–ú",
    "16": "–£–ì–†–û–ó–´",
    "17": "–§–ò–®–ò–ù–ì / –°–ù–û–° –°–ï–°–°–ò–ô"
}
templates = {
    key: f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞—Ä—É—à–∏—Ç–µ–ª—å: {{username}}, ID: {{id}}, —Å—Å—ã–ª–∫–∞: {{link}}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {val}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã."
    for key, val in categories.items()
}

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üì© –î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—ã")],
        [KeyboardButton(text="üì® –ù–∞—á–∞—Ç—å –∂–∞–ª–æ–±—É")],
        [KeyboardButton(text="üì¨ –ú–æ–∏ –ø–æ—á—Ç—ã"), KeyboardButton(text="üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –ø–æ—á—Ç—ã")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—á—Ç—ã")]
    ], resize_keyboard=True)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∂–∞–ª–æ–± –≤ Telegram.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

def parse_emails_passwords(text: str):
    pattern = re.compile(
        r"""['"]?([\w\.-]+@[\w\.-]+\.\w+)['"]?\s*[:=]\s*['"]?([^'",\s]+)['"]?""",
        re.MULTILINE
    )
    return pattern.findall(text)

async def check_email_login(email: str, password: str) -> bool:
    try:
        if 'gmail.com' in email:
            smtp = 'smtp.gmail.com'
            port = 587
        elif 'mail.ru' in email or 'rambler.ru' in email:
            smtp = 'smtp.mail.ru'
            port = 587
        else:
            smtp = 'smtp.office365.com'
            port = 587

        context = ssl.create_default_context()
        server = smtplib.SMTP(smtp, port, timeout=10)
        server.starttls(context=context)
        server.login(email, password)
        server.quit()
        return True
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã {email}: {e}")
        return False

@dp.message(F.text == "üì© –î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—ã")
async def request_emails(message: Message, state: FSMContext):
    await state.set_state(ReportStates.collecting_emails)
    await message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'email':'pass', \"email\":\"pass\", email:pass –∏ —Ç.–¥.\n"
        "‚ö†Ô∏è –î–ª—è Mail.ru –∏ Rambler.ru –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–ê–†–û–õ–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø!\n"
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å: https://help.mail.ru/mail/security/protection/external"
    )

@dp.message(ReportStates.collecting_emails)
async def save_emails(message: Message, state: FSMContext):
    text = message.text.strip()
    pairs = parse_emails_passwords(text)
    if not pairs:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã email:password. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    added = len(pairs)
    valid = 0
    for email, password in pairs:
        email = email.strip()
        password = password.strip()
        if await check_email_login(email, password):
            user_email_dumps.setdefault(message.from_user.id, {})[email] = password
            valid += 1
    await state.clear()
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –ø–æ—á—Ç, –∏–∑ –Ω–∏—Ö —Ä–∞–±–æ—á–∏—Ö: {valid}.")

@dp.message(F.text == "üì¨ –ú–æ–∏ –ø–æ—á—Ç—ã")
async def my_emails(message: Message):
    emails = user_email_dumps.get(message.from_user.id, {})
    if emails:
        email_list = '\n'.join(emails.keys())
        await message.answer(f"üì• –£ –≤–∞—Å –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(emails)} –ø–æ—á—Ç:\n<code>{email_list}</code>", parse_mode="HTML")
    else:
        await message.answer("üì• –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç.")

@dp.message(F.text == "üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –ø–æ—á—Ç—ã")
async def export_emails(message: Message):
    dump = user_email_dumps.get(message.from_user.id)
    if not dump:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç.")
    text = '\n'.join(f"{k}:{v}" for k, v in dump.items())
    await message.answer(f"<b>üì§ –í–∞—à–∞ –≤—ã–≥—Ä—É–∑–∫–∞:</b>\n<code>{text}</code>", parse_mode="HTML")

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—á—Ç—ã")
async def delete_all_emails(message: Message):
    if message.from_user.id in user_email_dumps:
        user_email_dumps.pop(message.from_user.id)
        await message.answer("üóë –í—Å–µ –≤–∞—à–∏ –ø–æ—á—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("‚Ñπ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç.")

@dp.message(F.text == "üì® –ù–∞—á–∞—Ç—å –∂–∞–ª–æ–±—É")
async def begin_report(message: Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    for key, value in categories.items():
        kb.add(KeyboardButton(text=f"{key}. {value}"))
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∞–ª–æ–±—ã:", reply_markup=kb.as_markup(resize_keyboard=True))
    await state.set_state(ReportStates.selecting_category)

@dp.message(ReportStates.selecting_category)
async def get_category(message: Message, state: FSMContext):
    code = message.text.split('.')[0]
    if code not in categories:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")
    await state.update_data(template_id=code)
    await state.set_state(ReportStates.entering_data)
    await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ;\n–§–æ—Ä–º–∞—Ç: USERNAME;ID;–°–°–´–õ–ö–ê")

async def send_email(receiver: str, sender_email: str, sender_password: str, subject: str, body: str):
    try:
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = receiver
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))
        if 'gmail.com' in sender_email:
            smtp = 'smtp.gmail.com'
            port = 587
        elif 'mail.ru' in sender_email or 'rambler.ru' in sender_email:
            smtp = 'smtp.mail.ru'
            port = 587
        else:
            smtp = 'smtp.office365.com'
            port = 587

        context = ssl.create_default_context()
        server = smtplib.SMTP(smtp, port, timeout=10)
        server.starttls(context=context)
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, receiver, msg.as_string())
        server.quit()
        return True, None
    except Exception as e:
        return False, str(e)

@dp.message(ReportStates.entering_data)
async def process_report_data(message: Message, state: FSMContext):
    if message.from_user.id not in user_email_dumps or not user_email_dumps[message.from_user.id]:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—á—Ç—ã —á–µ—Ä–µ–∑ üì© –î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—ã")
    try:
        username, user_id, link = [s.strip() for s in message.text.split(';')]
    except Exception:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ USERNAME;ID;–°–°–´–õ–ö–ê")
    data = await state.get_data()
    template = templates[data['template_id']]
    body = template.format(username=username, id=user_id, link=link)
    dump = user_email_dumps.get(message.from_user.id)
    success = 0
    fail = 0
    for sender_email, sender_password in dump.items():
        for receiver in RECEIVERS:
            result, error = await send_email(receiver, sender_email, sender_password, "Telegram –ñ–∞–ª–æ–±–∞", body)
            if result:
                await message.answer(f"‚úÖ {receiver} ‚Üê {sender_email}")
                success += 1
            else:
                await message.answer(f"‚ùå {receiver} ‚Üê {sender_email}. –û—à–∏–±–∫–∞: {error}")
                fail += 1
            await asyncio.sleep(1)
    await state.clear()
    await message.answer(f"üì¨ –ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–æ–∫: {fail}")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
